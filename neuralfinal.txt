import pandas as pd
import numpy as np
import tensorflow as tf
df=pd.read_csv("/content/Churn_Modelling.csv")
df.head()
df.info()
df.isnull().sum()
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x=df.iloc[:,3:-1].values
print(x)
y=df.iloc[:,-1].values
y
x[:,2]=le.fit_transform(x[:,2])
print(x)
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct=ColumnTransformer(transformers=[("encoder",OneHotEncoder(),[1])],remainder='passthrough')
x=np.array(ct.fit_transform(x))
x
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)
from sklearn.preprocessing import StandardScaler
import tensorflow as tf
std=StandardScaler()
x_train=std.fit_transform(x_train)
ann=tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=6,activation="relu"))
ann.add(tf.keras.layers.Dense(units=6,activation="relu"))
ann.add(tf.keras.layers.Dense(units=1,activation="sigmoid"))
ann.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])
ann.fit(x_train,y_train,batch_size=32,epochs=100)
x_train = std.fit_transform(x_train)
x_test = std.transform(x_test)
y_pred = ann.predict(x_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))
from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,y_pred)
print(cm)
accuracy_score(y_test,y_pred)